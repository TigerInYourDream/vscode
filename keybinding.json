// Place your key bindings in this file to override the defaults
[
    {
        "action": "-workbench.action.toggleMaximizedPanel",
        "key": "Ctrl+F12"
    },
    {
        "command": "-editor.action.revealDefinition",
        "key": "f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "command": "-editor.gotoNextSymbolFromResult",
        "key": "f12",
        "when": "hasSymbols"
    },
    {
        "command": "-goToNextReference",
        "key": "f12",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "command": "workbench.action.togglePanel",
        "key": "f12"
    },
    {
        "command": "-workbench.action.togglePanel",
        "key": "cmd+j"
    },
    {
        "command": "-editor.action.transposeLetters",
        "key": "ctrl+t",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "-extension.vim_ctrl+t",
        "key": "ctrl+t",
        "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"
    },
    {
        "command": "workbench.action.navigateBack",
        "key": "ctrl+t",
        "when": "canNavigateBack"
    },
    {
        "command": "-workbench.action.navigateBack",
        "key": "ctrl+-",
        "when": "canNavigateBack"
    },
    {
        "command": "-extension.vim_ctrl+]",
        "key": "ctrl+]",
        "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl"
    },
    {
        "command": "-editor.action.revealDefinition",
        "key": "cmd+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus & isWeb && !isInEmbeddedEditor"
    },
    {
        "command": "editor.action.revealDefinition",
        "key": "ctrl+]"
    },
    {
        "command": "editor.action.startFindReplaceAction",
        "key": "cmd+h",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "command": "-editor.action.startFindReplaceAction",
        "key": "alt+cmd+f",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "command": "workbench.action.showCommands",
        "key": "alt+x"
    },
    {
        "command": "rust-analyzer.run",
        "key": "ctrl+u",
        "when": "editorLangId == rust"
    },
    {
        "args": {
            "commands": [
                {
                    "args": "terminateAll",
                    "command": "workbench.action.tasks.terminate"
                },
                "workbench.action.tasks.build"
            ]
        },
        "command": "runCommands",
        "key": "ctrl+u",
        "when": "editorLangId != rust"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "ctrl+k",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "command": "workbench.action.quickOpenNavigateNext",
        "key": "ctrl+j",
        "when": "inQuickOpen"
    },
    {
        "command": "selectNextSuggestion",
        "key": "tab",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "command": "workbench.action.quickOpenNavigateNext",
        "key": "tab",
        "when": "inQuickOpen"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "shift+tab",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "command": "workbench.action.quickOpenNavigatePrevious",
        "key": "shift+tab",
        "when": "inQuickOpen"
    },
    {
        "command": "workbench.action.quickOpenNavigatePrevious",
        "key": "ctrl+k",
        "when": "inQuickOpen"
    },
    {
        "command": "list.select",
        "key": "enter",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "command": "list.select",
        "key": "l",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "command": "-acceptAlternativeSelectedSuggestion",
        "key": "shift+tab",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    }
]
